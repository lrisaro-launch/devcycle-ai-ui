import React, { useState } from "react";
import { FaCheckCircle } from "react-icons/fa";
import { useProcessedFile } from "../context/ProcessedFileContext";
import AppHeader from "./AppHeader";
import "./ProcessedFileView.css";
import azureLogo from "../assets/azure.svg";
import jiraLogo from "../assets/jira.svg";
import AppFooter from "./AppFooter";

const ProcessedFileView: React.FC = () => {
  const { result } = useProcessedFile();
  const historias = result?.analisis?.tickets;
  const [isCreating, setIsCreating] = useState<boolean>(false);
  const [showSuccess, setShowSuccess] = useState<boolean>(false);
  const [currentStory, setCurrentStory] = useState<number>(0);
  const [selectedRepo, setSelectedRepo] = useState<string>("Jira");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsCreating(true);
    try {
      if (selectedRepo == "Jira") {
        const response = await fetch("https://ai-devcrew-back.onrender.com/publish-to-jira", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(result),
        });

        if (!response.ok) {
          throw new Error("Failed to process the document.");
        }
      }

      setIsCreating(false);
      setShowSuccess(true);
    } catch (err: any) {
      setIsCreating(false);
      alert("An error occurred while processing the document.");
    }
  }

  return (
    <div className="pfv-bg">
      <AppHeader />
      <div className="pfv-title-section">
        <h1 className="pfv-title">Processed file content</h1>
        <p className="pfv-description">
          Here you can review all the user stories generated by the AI for your document. Use the arrows to navigate through each story and see the full details.
        </p>
      </div>
      <main className="pfv-main">
        <div className="pfv-content-card pfv-content-card-large">
          <div className="pfv-user-stories-title">User Stories</div>
          <div className="pfv-historia-carousel pfv-historia-carousel-large">
            <button
              type="button"
              className="pfv-carousel-arrow"
              onClick={() => setCurrentStory((prev) => Math.max(prev - 1, 0))}
              disabled={currentStory === 0}
              aria-label="Previous story"
            >
              <span className="pfv-carousel-arrow-icon">&#8249;</span>
            </button>
            {historias && Array.isArray(historias) && historias.length > 0 ? (
              <div className="pfv-historia-card pfv-historia-card-full">
                <span className="pfv-epica">
                  {currentStory + 1}. {historias[currentStory].summary}
                </span>
                <span className="pfv-historia">
                  {historias[currentStory].description}
                </span>
                <br />
                <span className="pfv-subtitle">
                  Acceptance criteria:
                </span>
                <span className="pfv-historia">
                  {historias[currentStory].acceptance_criteria}
                </span>
              </div>
            ) : (
              <div style={{ color: "#334155", fontSize: "1.1rem", textAlign: "left", whiteSpace: "pre-wrap" }}>
                <em>No processed content available.</em>
              </div>
            )}
            <button
              type="button"
              className="pfv-carousel-arrow"
              onClick={() => setCurrentStory((prev) => Math.min(prev + 1, (historias?.length ?? 1) - 1))}
              disabled={!historias || currentStory === (historias?.length ?? 1) - 1}
              aria-label="Next story"
            >
              <span className="pfv-carousel-arrow-icon">&#8250;</span>
            </button>
          </div>
          {historias && historias.length > 0 && (
            <div className="pfv-carousel-indicator">
              {currentStory + 1} / {historias.length}
            </div>
          )}

          <div className="pfv-platform-section">
            <div className="pfv-platform-title">Select the platform where you want to create the user stories</div>
            <div className="pfv-platform-options">
              <label className={`pfv-platform-option${selectedRepo === "Azure" ? " selected" : ""}`}>
                <input
                  type="radio"
                  name="repo"
                  value="Azure"
                  checked={selectedRepo === "Azure"}
                  onChange={() => setSelectedRepo("Azure")}
                />
                <img src={azureLogo} alt="Azure" className="pfv-platform-logo pfv-platform-logo-large" />
                <span className="pfv-platform-label">Azure</span>
              </label>
              <label className={`pfv-platform-option${selectedRepo === "Jira" ? " selected" : ""}`}>
                <input
                  type="radio"
                  name="repo"
                  value="Jira"
                  checked={selectedRepo === "Jira"}
                  onChange={() => setSelectedRepo("Jira")}
                />
                <img src={jiraLogo} alt="Jira" className="pfv-platform-logo pfv-platform-logo-large" />
                <span className="pfv-platform-label">Jira</span>
              </label>
            </div>
            <br />
            <button type="submit" disabled={isCreating} onClick={handleSubmit} >
              {isCreating ? "Creating..." : "Create"}
            </button>
            {isCreating && (
              <div className="pfv-progress">
                <span className="loader"></span> Creating user stories...
              </div>
            )}
          </div>
        </div>
      </main>
      {showSuccess && (
        <div className="pfv-modal-bg">
          <div className="pfv-modal">
            <div className="pfv-modal-success-icon">
              <FaCheckCircle color="#22c55e" size={44} />
            </div>
            <div className="pfv-modal-success-title">Success!</div>
            <div className="pfv-modal-success-msg">
              User stories created successfully!
            </div>
            <button className="pfv-modal-btn" onClick={() => setShowSuccess(false)}>
              Close
            </button>
          </div>
        </div>
      )}
      <AppFooter />
    </div>
  );
};

export default ProcessedFileView;